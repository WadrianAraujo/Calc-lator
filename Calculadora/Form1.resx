<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAZ0YxAGdJMABnSTAAZ0gxAGdIMQBnSTEAZ0kxAGdJMQBnSTEAZ0kxAGdJ
        MQBnSTEAZ0kxAGdJMQBnSTEAZ0kxAGdJMQBnSTEAZ0kxAGdJMQBnSTEAZ0kxAGdJMQBnSTEAZ0kxAGdJ
        MQBnSTEAZ0kxAAAAAAAAAAAAAAAAAGdJMABnSTEAZkgxAGtNMgFhQy8El3xCA9vCWQN8YDgDa04yAnFT
        NAJwUjQCcFI0Am9SNAJwUzQCa00yAmVMMgJlUTMCZVEzAmVRMwJlUTMCZVEzAmVRMwJlUTMCZVEzAmVR
        MwJnSjEEZ0gxAWdIMQBnSTEAZkgxAAAAAAAAAAAAZ0gxAGdJMQBnSTEAZ0kxAWdJMQBnSTEAZ0kxAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABoSjEAZ0kxAGdJMQBnSTEBZ0kxAGdJMQBnSTEAAAAAAAAAAAAAAAAAZkgxAW5RMwB5XDcNWzwtm3NV
        NZTw2WA8ZUcwrF9ALsFgQi+8YEIvvWBCL71gQi+9YEEuvWNGML1oRjG9aUIwvWlDML1pQzC9aUMwvWlD
        ML1pQzC9aUMwvWlDMLxpQjDBaUEvk2VPMg5lUDIAZ0gxAQAAAAAAAAAAAAAAAGdIMABoSjEEVTYrAF9B
        LpGMbz7/0LdV++LKW//CqVD/u6FO/7yiTv+9o0//vaNP/7uiTv/Dq1H/k3A//1ZpN/9SnkP/UpVB/1KW
        Qf9SlkH/UpZB/1KWQf9SlkH/UpZB/1GbQvtdbDj/aUEvkWs5LgBnSjEEZ0kxAAAAAAAAAAAAZ0kxAG9S
        NAJKKycAX0EuvMOpUf/v2GD538da/ejQXfzr1F/88Nhg/OrSXvzp0V78589d/PLdYfyqhUb8TXo6/EfJ
        TPxIvEn8SLxJ/Ei8SfxIvEn8SLxJ/Ei8SfxIvEn8RcZL+VGbQv9pQjC8bi8sAGVQMwJnSTEAAAAAAAAA
        AABnSTEAcFI0Ak8vKQBgQi+8vKJO/+jQXfzexlr/4spb/8uyVP+Td0D/3MRZ/9/HWv/dxVr/6NNe/6WA
        RP9Pdjn/Sb9K/0m4SP9HwEr/R79K/0e/Sv9Hv0r/R8BK/0i7Sf9IvEn8UpZB/2lDMLxtMywAZVEzAmdJ
        MQAAAAAAAAAAAGdJMQBwUjQCTi4oAGBCL729o0//6dFe/OLKW//w2WD/wqlQ/2NFMP/gyFv/69Ne/+HJ
        W//p1F7/poFE/092Of9IxUv/UJ5D/1t2Ov9aejv/Wno7/1p6O/9bdjr/VJBA/0bCSvxSlkH/aUMwvG00
        LQBlUjMCZ0kxAAAAAAAAAAAAZ0kxAHBSNAJOLygAYEIvvbyjTv/r1F78y7JT/8KpUP+ojUf/a00y/7uh
        Tv+/pk//07tW/+vWX/+mgET/T3U5/0fHTP9TkkD/Ylo1/2FhNv9hXzb/YWE2/2JaNf9ZfTz/RsRL/FOU
        Qf9pQC+9cCkqAGdJMQJnSTEAAAAAAAAAAABnSTEAcFI0Ak4vKABgQi+9vKJO//DYYPyTd0D/Y0Uw/2tN
        Mv9nSTH/bE4z/2NFMP+vlUr/8dxh/6R/RP9Pdzn/ScFK/0m4SP9JuEj/SbdI/0m3SP9Jt0j/SbdI/0i5
        SP9HvUn8T6BD/2VPMptiWjUAXWw4A2dJMQAAAAAAAAAAAGdJMQBwUjQCTi8oAGBCL729o0//6tJe/NzE
        Wf/gyFv/u6FO/2xOM//Tulb/3MRZ/97GWv/q1F//poFE/1B1Of9HyEz/VYk+/2hEMP9mTDL/Zksx/2ZM
        Mv9oRDD/XHE5/0e/SvxLrkb/WXw8YFSQQABTlEEDZkkwAAAAAAAAAAAAZ0kxAHBSNAJOLygAYEIvvb2j
        T//p0V7838da/+vTXv+/pk//Y0Uw/9zEWf/lzl3/38da/+nUXv+mgUT/T3Y5/0jDS/9Mq0X/UpdB/1GZ
        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
        /fwA8f/5H7jB/21AJbx9JgYAYFM/AmdJMQAAAAAAAAAAAGdJMQBnSTIEcj0UAGxDI5FPYnD/MIXG+zOB
        vP8zgb3/M4G9/zOBvf8zgb3/M4G9/zSAu/8uh8r/Ul5t/0h3bf8Swtv/Adz9/xm6zv8gr7//HrLD/x+x
        wv8gsMD/IK+//xq4y/tGeHL/bj4ikXYzEwBmSjIEZ0gwAAAAAAAAAAAAAAAAAGdJMAFiTj0AY048DmxD
        IpNsRCXBa0UmvGtEJr1rRCa9a0QmvWtEJr1rRCa9a0UmvWxEJb1oSC28a0MpwmdJMqcA4/9AZE02om4+
        IsNsQSa8bUElvW1BJb1tQSa8bUAkwW8+IpNhUTwOYVI9AGdIMAEAAAAAAAAAAAAAAABnSTEAZ0kxAGdJ
        MQBnSTEBZ0kxAGdJMQBnSTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhJMwBnSTEAZ0kxAGdJMQFnSTEAZ0kxAGdJMAAAAAAAAAAAAGhI
        MQBnSTEAZ0kwAGdJMAFnSTIEYk8/AmJPPwJiTz8CYk8/AmJPPwJiTz8CYk8/AmJPPwJhT0ACZE05AmlH
        LQJPa2ADCdHuA0xwZwNlSzQCX1VCAmBTPwJgUz8CYFNAAmBTPwJmSjIEZ0gwAWhIMABnSTEAZkkwAAAA
        AAAAAAAAAAAAAGlJMQBnSTEAZ0kwAGdJMABnSTEAZ0kxAGdJMQBnSTEAZ0kxAGdJMQBnSTEAZ0kxAGdJ
        MQBnSTEAZ0kxAGdJMQBnSTEAZ0kxAGdJMQBnSTEAZ0kxAGdJMQBnSTEAZ0kxAGZIMABnSDAAZ0gxAGNL
        MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////kAAB/QAAAL5f//p9AAAAuQAAAJkAAACZAAAAmQAAAJkAAACZAA
        AAmQAAAJkAAACZAAAAmQAAAJkAAACZAAAAmQAAAJkAAACZAAAAmQAAAJkAAACZAAAAmQAAAJkAAACZAA
        AAmQAAAJ0AAAC+X//6fQAAAL+AAgH/////8=
</value>
  </data>
</root>